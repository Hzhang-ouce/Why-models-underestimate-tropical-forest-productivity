library(tidyverse)
ima <- list.files('Z:/home/Oxford_jesus_huanyuan/input_maps/',
pattern = '^AllLayers', full.names = T)# pattern='^AllLayers_S2_FP'
input_maps_list<-list.files('Z:/home/Oxford_jesus_huanyuan/input_maps/',
pattern = '^AllLayers', full.names = F)# pattern='^AllLayers_S2_FP'
input_maps_list<-gsub('.{4}$', '', input_maps_list)
#Model
mod<- list.files('Z:/home/Oxford_jesus_huanyuan/ModelsJesusPantropical',
pattern = '*.RDS', full.names = T)
my_todo_list<-list()
for (model_number in 1:length(mod)) {
traitmodel_name <-  strsplit(mod[model_number], "\\/")[[1]]
traitmodel_name<-traitmodel_name[length(traitmodel_name)]
traitmodel<- strsplit(traitmodel_name[1], "\\_")[[1]][1]
target_output<-list.files('Z:/ephemeral/output_maps_20230601/',
pattern = paste0(traitmodel,'.*.tif$'), full.names = F)
target_output<-stringr::str_extract( target_output,'\\d*.tif$')
target_output<-stringr::str_replace(string=target_output,pattern ='.tif',replacement = '' )
my_sequence<-seq(from=1,to= length(ima),by=1)
my_sequence<-my_sequence[! my_sequence %in% target_output]
if (length(my_sequence)>0) {
todo<-as.data.frame(my_sequence)
todo$model_number<-model_number
my_todo_list[[model_number]]<-todo
}}
my_todo_list <- do.call(rbind, my_todo_list)
View(my_todo_list)
load("Z:/home/Oxford_jesus_huanyuan/my_todo_list.RData")
View(my_specific_todo)
View(my_todo_list)
View(my_specific_todo)
#This will slice the to do list into 50 portions
n <- 1
nr <- nrow(my_todo_list)
my_specific_todo<-split(my_todo_list, rep(1:ceiling(nr/n), each=n, length.out=nr))
save(my_specific_todo,file='Z:/home/Oxford_jesus_huanyuan/my_todo_list.RData')
rm(list=ls())
#setwd("~/GitHub/Ghana_aridity_transect_Carbon_cycle_")
setwd('H:/Oxford/Chapter_two/wirting_up/Ghana_aridity_transect_Carbon_cycle_')
rm(list=ls())
#setwd("~/GitHub/Ghana_aridity_transect_Carbon_cycle_")
setwd('H:/Oxford/Chapter_two/wirting_up/Ghana_aridity_transect_Carbon_cycle_')
# Generate transect aridity index
library(stringr)
library(ggplot2)
library(ggpubr)
library(dplyr)
# Read in Amazon data
amazon <- read.csv("input_data/MCWD.csv")%>%select(-Plot_name)
# Read in Ghana data
ghana <- read.csv("input_data/all_GPP_together_per_plot_20221122.csv")
# Use a new dataframe to save needed columns
ghana_selected <- ghana%>%
mutate(GPP_mean=GPP)%>%
mutate(GPP_max=GPP+GPP_se)%>%
mutate(GPP_min=GPP-GPP_se)%>%
mutate(CUE_mean=CUE)%>%
mutate(CUE_max=CUE+CUE_se)%>%
mutate(CUE_min=CUE-CUE_se)%>%
mutate(NPP_mean=NPP)%>%
mutate(NPP_max=NPP+NPP_se)%>%
mutate(NPP_min=NPP-NPP_se)%>%
mutate(NPP.ACW._mean=NPP_all_stem)%>%
mutate(NPP.ACW._max=NPP_all_stem+NPP_all_stem_se)%>%
mutate(NPP.ACW._min=NPP_all_stem-NPP_all_stem_se)%>%
mutate(NPP.litter_fall._mean=NPP_fine_litter_fall)%>%
mutate(NPP.litter_fall._max=NPP_fine_litter_fall+NPP_fine_litter_fall_se)%>%
mutate(NPP.litter_fall._min=NPP_fine_litter_fall-NPP_fine_litter_fall_se)%>%
mutate(Autotrophic_respiration_mean=R_autotrophic)%>%
mutate(Autotrophic_respiration_max=R_autotrophic+R_autotrophic_se)%>%
mutate(Autotrophic_respiration_min=R_autotrophic-R_autotrophic_se)%>%
mutate(Root_respiration_mean=R_rhizosphere)%>%
mutate(Root_respiration_max=R_rhizosphere+R_rhizosphere_se)%>%
mutate(Root_respiration_min=R_rhizosphere-R_rhizosphere_se)%>%
select(c(plot_code,LAI,LAI_se, GPP_mean, GPP_max, GPP_min, CUE_mean, CUE_max, CUE_min, NPP_mean, NPP_max, NPP_min, NPP.ACW._mean, NPP.ACW._max, NPP.ACW._min, NPP.litter_fall._mean, NPP.litter_fall._max, NPP.litter_fall._min, Autotrophic_respiration_mean, Autotrophic_respiration_max, Autotrophic_respiration_min,NPP_fineroot,	NPP_fineroot_se,	R_rhizosphere,	R_rhizosphere_se,	R_leaf,	R_leaf_se,	R_stem,	R_stem_se))
ghana_selected$C_stem<-c(162.7,153.3,110.5,111.8,129.0,132,118,148,142,101.4,100.5,53.6,58.6,65.6)
ghana_selected$C_stem_se<-c(32.5,30.7,22.10,22.4,25.8,26.40 ,23.60,29.60 ,28.40 ,20.3,20.1,10.72 ,11.7,13.1)
# C_stem, which is stem biomass or above ground coarse woody biomass based on census data, were obtained from Moore 2018 GCB Fig. S1
# Add moisture data
colnames(ghana_selected)[1] <- "Plot"
MCWD_Ghana <- read.csv("input_data/MCWD_with_Ghana.csv")[c("Mean.MCWD", "Plot", "Source", "Location", "SoilMoisture")]
ghana_selected <- left_join(ghana_selected, MCWD_Ghana, by = "Plot")
# Combine Amazon and Ghana data
d <- rbind(amazon, ghana_selected)
# Generate TAI
temp <- d%>%arrange(desc(Mean.MCWD), desc(SoilMoisture))
TAI <- data.frame(Plot=temp$Plot, TAI=(1:nrow(temp)))
d <- left_join(d, TAI, by="Plot")%>%
arrange(TAI)%>%
dplyr::rename(Region = Source )
# Reproduce the figure, using TAI as x axis
GPP <- ggplot(d,aes(TAI, GPP_mean, color=Region)) +
geom_point(size=3) +
stat_smooth(aes(TAI, GPP_mean),method = "loess",size = 0.8,level=0.95,span=0.9) +
theme_classic() +
labs(x=NULL,
y="GPP (Mg C ha-1 yr-1)") +
guides(size="none") +
geom_errorbar(aes(x=TAI, y=GPP_mean, ymin=GPP_min, ymax=GPP_max))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
scale_colour_manual(values=c("#0072B2", "#FFB000"))
GPP
CUE <- ggplot(d,aes(TAI, CUE_mean, color=Region)) +
geom_point(size=3) +
stat_smooth(aes(TAI, CUE_mean),method = "loess",size = 0.8,level=0.95,span=0.9) +
theme_classic() +
labs(x=NULL,
y="CUE") +
guides(size="none") +
geom_errorbar(aes(x=TAI, y=CUE_mean, ymin=CUE_min, ymax=CUE_max))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
scale_colour_manual(values=c("#0072B2", "#FFB000"))
CUE
NPP <- ggplot(d,aes(TAI, NPP_mean, color=Region)) +
geom_point(size=3) +
stat_smooth(aes(TAI, NPP_mean),method = "loess",size = 0.8,level=0.95,span=0.9) +
theme_classic() +
labs(x=NULL,
y="NPP (Mg C ha-1 yr-1)") +
guides(size="none") +
geom_errorbar(aes(x=TAI, y=NPP_mean, ymin=NPP_min, ymax=NPP_max))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
scale_colour_manual(values=c("#0072B2", "#FFB000"))
NPP
NPP_ACW <- ggplot(d,aes(TAI, NPP.ACW._mean, color=Region)) +
geom_point(size=3) +
stat_smooth(aes(TAI, NPP.ACW._mean),method = "loess",size = 0.8,level=0.95,span=0.9) +
theme_classic() +
labs(x=NULL,
y="Stem NPP (Mg C ha-1 yr-1)") +
guides(size="none") +
geom_errorbar(aes(x=TAI, y=NPP.ACW._mean, ymin=NPP.ACW._min, ymax=NPP.ACW._max))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
scale_colour_manual(values=c("#0072B2", "#FFB000"))
NPP_ACW
AutoResp <- ggplot(d,aes(TAI, Autotrophic_respiration_mean, color=Region)) +
geom_point(size=3) +
stat_smooth(aes(TAI, Autotrophic_respiration_mean),method = "loess",size = 0.8,level=0.95,span=0.9) +
theme_classic() +
labs(x=NULL,
y="Autotrophic Respiration\n(Mg C ha-1 yr-1)") +
guides(size="none") +
geom_errorbar(aes(x=TAI, y=Autotrophic_respiration_mean, ymin=Autotrophic_respiration_min, ymax=Autotrophic_respiration_max))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
scale_colour_manual(values=c("#0072B2", "#FFB000"))
AutoResp
NPP_litter_fall <- ggplot(d,aes(TAI, NPP.litter_fall._mean, color=Region)) +
geom_point(size=3) +
stat_smooth(aes(TAI, NPP.litter_fall._mean),method = "loess",size = 0.8,level=0.95,span=0.9) +
theme_classic()  +
guides(size="none") +
geom_errorbar(aes(x=TAI, y=NPP.litter_fall._mean, ymin=NPP.litter_fall._min, ymax=NPP.litter_fall._max))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(x=NULL,
y="NPP by litterfall\n(Mg C ha-1 yr-1)") +
scale_colour_manual(values=c("#0072B2", "#FFB000"))
NPP_litter_fall
R_leaf_figure <- ggplot(d,aes(TAI, R_leaf, color=Region)) +
geom_point(size=3) +
stat_smooth(aes(TAI, R_leaf),method = "loess",size = 0.8,level=0.95,span=0.9) +
theme_classic()  +
geom_errorbar(aes(x=TAI, y=R_leaf, ymin=R_leaf-R_leaf_se, ymax=R_leaf+R_leaf_se))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(x=NULL,
y="Leaf respiration\n(Mg C ha-1 yr-1)") +
scale_colour_manual(values=c("#0072B2", "#FFB000"))
R_leaf_figure
R_stem_figure <- ggplot(d,aes(TAI, R_stem, color=Region)) +
geom_point(size=3) +
stat_smooth(aes(TAI, R_stem),method = "loess",size = 0.8,level=0.95,span=0.9) +
theme_classic() +
labs(x=NULL,
y="Stem Respiration\n(Mg C ha-1 yr-1)") +
guides(size="none") +
geom_errorbar(aes(x=TAI, y=R_stem, ymin=R_stem-R_stem_se, ymax=R_stem+R_stem_se))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
scale_colour_manual(values=c("#0072B2", "#FFB000"))
R_stem_figure
NPP_fineroot_figure <- ggplot(d,aes(TAI, NPP_fineroot, color=Region)) +
geom_point(size=3) +
stat_smooth(aes(TAI, NPP_fineroot),method = "loess",size = 0.8,level=0.95,span=0.9) +
theme_classic() +
labs(x='\n\n\nWet >>>>>>>>>>>Dry plots',
y="Fineroot NPP\n(Mg C ha-1 yr-1)") +
guides(size="none") +
geom_errorbar(aes(x=TAI, y=NPP_fineroot, ymin=NPP_fineroot-NPP_fineroot_se, ymax=NPP_fineroot+NPP_fineroot_se))+
theme(
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
geom_text(data=d,aes(label = Plot,y=-1.5),angle =90,size=3)+
coord_cartesian(ylim = c(0, NA), # This focuses the x-axis on the range of interest
clip = 'off')+
scale_colour_manual(values=c("#0072B2", "#FFB000"))
NPP_fineroot_figure
R_rhizosphere_figure <- ggplot(d,aes(TAI, R_rhizosphere, color=Region)) +
geom_point(size=3) +
stat_smooth(aes(TAI, R_rhizosphere),method = "loess",size = 0.8,level=0.95,span=0.9) +
theme_classic() +
labs(x='\n\n\nWet >>>>>>>>>> Dry plots',
y="Rhizosphere respiration\n(Mg C ha-1 yr-1)") +
guides(size="none") +
geom_errorbar(aes(x=TAI, y=R_rhizosphere, ymin=R_rhizosphere-R_rhizosphere_se, ymax=R_rhizosphere+R_rhizosphere_se))+
theme(
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
geom_text(data=d,aes(label = Plot,y=-0.5),angle =90,size=3)+
coord_cartesian(ylim = c(1, NA), # This focuses the x-axis on the range of interest
clip = 'off')  +
scale_colour_manual(values=c("#0072B2", "#FFB000"))
R_rhizosphere_figure
C_stem <- ggplot(d,aes(TAI, C_stem, color=Region)) +
geom_point(size=3) +
stat_smooth(aes(TAI, C_stem),method = "loess",size = 0.8,level=0.95,span=0.9) +
theme_classic() +
labs(y="Stem Biomass (Mg C ha-1)") +
guides(size="none") +
geom_errorbar(aes(x=TAI, y=C_stem, ymin=C_stem-C_stem_se, ymax=C_stem+C_stem_se))+
theme(
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(x='\n\n\nWet >>>>>>>>>>>Dry plots')+
geom_text(data=d,aes(label = Plot,y=-70),angle =90,size=3) +
coord_cartesian(ylim = c(0, NA), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_colour_manual(values=c("#0072B2", "#FFB000"))
C_stem
LAI <- ggplot(d,aes(TAI, LAI, color=Region)) +
geom_point(size=3) +
stat_smooth(aes(TAI, LAI),method = "loess",size = 0.8,level=0.95,span=0.9) +
theme_classic()  +
guides(size="none") +
geom_errorbar(aes(x=TAI, y=LAI, ymin=LAI-LAI_se, ymax=LAI+LAI_se))+
theme(
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(x='\n\n\nWet >>>>>>>>>>>Dry plots',
y='Leaf area index (m2 m-2)') +
guides(size="none")+
geom_text(data=d,aes(label = Plot,y=0.4),angle =90,size=3)+
coord_cartesian(ylim = c(1.7, NA), # This focuses the x-axis on the range of interest
clip = 'off')+
scale_colour_manual(values=c("#0072B2", "#FFB000"))
LAI
f <- ggarrange(plotlist=list(GPP, CUE, NPP, AutoResp, C_stem,LAI),
ncol = 2, nrow = 3,
common.legend = TRUE, align="v",heights=c(1,1,1.2))
f
f2 <- ggarrange(plotlist=list(NPP_litter_fall,R_leaf_figure,NPP_ACW, R_stem_figure, NPP_fineroot_figure, R_rhizosphere_figure),
ncol = 2, nrow = 3,
common.legend = TRUE, align="v",heights=c(1,1,1.2))
f2
ggsave(filename = "figure1/figure1/TAI_202306.jpg",f,height=6.66, width = 7.1)
ggsave(filename = "figure1/figure1/TAI_part2_202306.jpg",f2,height=6.66, width = 7.1)
load("H:/Oxford/Chapter_three/Figure_four_timeseries_of_fapar/organized_climate_withppfd_two_fapar.rda")
standard_error_calc <- function(x, na.rm=FALSE) {
if (na.rm) x <- na.omit(x)
sqrt(var(x)/length(x))
}
library(tidyverse)
# so xiongjie helps to download fapar from MODIS using GEE, now I just need to plot it with R
setwd('H:\\Oxford\\Chapter_three\\Figure_three_timeseries_of_fapar')
Raw_csv<-read_csv('Plot Points Data  from GEE Xiongjie.csv')
standard_error_calc <- function(x, na.rm=FALSE) {
if (na.rm) x <- na.omit(x)
sqrt(var(x)/length(x))
}
library(tidyverse)
# so xiongjie helps to download fapar from MODIS using GEE, now I just need to plot it with R
setwd('H:\\Oxford\\Chapter_three\\github_version/2_Figure_four_timeseries_of_fapar/')
Raw_csv<-read_csv('Plot Points Data  from GEE Xiongjie.csv')
std.error <- function(x) sd(x)/sqrt(length(x))
Processed_csv<-Raw_csv%>%
rowwise()%>%
mutate( FparQC_binary=paste(rev(as.integer(intToBits(FparLai_QC))), collapse=""),
# convert to binary
FparQC_binary = stringi::stri_sub(FparQC_binary,-8,-1),
# only last 8 digits are meaningful, remove other 0 at the start of the string
CLOUDSTATE = as.numeric(substr(FparQC_binary,4,5)),
# extract cloud state, 00 denote no cloud
month = substr(date,6,7),
# extract month from the 6th and 7th digits
site = substr(name,1,3))%>%
# extract site from the 1st to 3rd digits
group_by(month, site)%>%
mutate(number_measured = n(),
#number of measurements under a month and plot
number_no_cloud = sum(CLOUDSTATE==0,na.rm=T),
# number of no clound measurements
percentage_of_no_clound = number_no_cloud/number_measured)%>%
group_by(month, site)%>%
summarise(Fpar_500m_mean = mean(Fpar_500m, na.rm=T),
Fpar_500m_se = std.error(Fpar_500m),
percentage_of_no_clound=mean(percentage_of_no_clound))
FAPAR<-read.csv('LAI_monthly_Caneye_illastik_20211208.csv')%>%
mutate(site= substr(plot_code,1,3))%>%
group_by(month,site)%>%
summarise(    FAPAR_field_se = standard_error_calc(final_FAPAR),
FAPAR_field = mean (final_FAPAR)*100,
n=n())
# Plot the result
library(ggplot2)
Processed_csv %>%
mutate(month = as.numeric(month)) %>%
ggplot() +
geom_rect(aes(xmin = month - 0.5, xmax = month + 0.5, ymin = 0, ymax = 100, fill = 1 - percentage_of_no_clound)) +
geom_line(aes(x = month, y = Fpar_500m_mean),col='cyan') +
geom_point(aes(x = month, y = Fpar_500m_mean,shape = 'MODIS'),col='cyan') +
geom_line(aes(x = month, y = FAPAR_field), data = FAPAR,col='#FFB000') +
geom_point(aes(x = month, y = FAPAR_field,shape = 'FAPAR'), data = FAPAR,col='#FFB000') +
facet_wrap(~site, nrow = 3, ncol = 1) +
scale_x_continuous(breaks = seq(1, 12, 1), labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
ylab("FAPAR mean (%)") +
scale_fill_gradient(low = "white", high = "black", name = "Percentage of \n data with cloud") + # Set gradient colors from blue to red
theme_bw() +scale_shape_manual(values =c(16, 17),labels = c('Measured' , 'MODIS'), name= 'Source')+
theme(panel.grid = element_blank())
Processed_csv %>%
mutate(month = as.numeric(month)) %>%
ggplot() +
geom_rect(aes(xmin = month - 0.5, xmax = month + 0.5, ymin = 0, ymax = 100, fill = 1 - percentage_of_no_clound)) +
geom_line(aes(x = month, y = Fpar_500m_mean),col='cyan') +
geom_point(aes(x = month, y = Fpar_500m_mean,shape = 'MODIS'),col='cyan') +
geom_line(aes(x = month, y = FAPAR_field), data = FAPAR,col='#FFB000') +
geom_point(aes(x = month, y = FAPAR_field,shape = 'FAPAR'), data = FAPAR,col='#FFB000') +
facet_wrap(~site, nrow = 3, ncol = 1) +
scale_x_continuous(breaks = seq(1, 12, 1), labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
ylab("FAPAR mean (%)") +
scale_fill_gradient(low = "white", high = "black", name = "Percentage of \n data with cloud") + # Set gradient colors from blue to red
theme_bw() +scale_shape_manual(values =c(16, 17),labels = c('Measured' , 'MODIS'), name= 'Source')+
theme(panel.grid = element_blank()) +scale_colour_manual(values =c(16, 17),labels = c('Measured' , 'MODIS'), name= 'Source')
Processed_csv %>%
mutate(month = as.numeric(month)) %>%
ggplot() +
geom_rect(aes(xmin = month - 0.5, xmax = month + 0.5, ymin = 0, ymax = 100, fill = 1 - percentage_of_no_clound)) +
geom_line(aes(x = month, y = Fpar_500m_mean),col='cyan') +
geom_point(aes(x = month, y = Fpar_500m_mean,shape = 'MODIS'),col='cyan') +
geom_line(aes(x = month, y = FAPAR_field), data = FAPAR,col='#FFB000') +
geom_point(aes(x = month, y = FAPAR_field,shape = 'FAPAR'), data = FAPAR,col='#FFB000') +
facet_wrap(~site, nrow = 3, ncol = 1) +
scale_x_continuous(breaks = seq(1, 12, 1), labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
ylab("FAPAR mean (%)") +
scale_fill_gradient(low = "white", high = "black", name = "Percentage of \n data with cloud") + # Set gradient colors from blue to red
theme_bw() +scale_shape_manual(values =c(16, 17),labels = c('Measured' , 'MODIS'), name= 'Source')+
theme(panel.grid = element_blank()) +scale_colour_manual(values =c('#FFB000', 'cyan'),labels = c('Measured' , 'MODIS'), name= 'Source')
Processed_csv %>%
mutate(month = as.numeric(month)) %>%
ggplot() +
geom_rect(aes(xmin = month - 0.5, xmax = month + 0.5, ymin = 0, ymax = 100, fill = 1 - percentage_of_no_clound)) +
geom_line(aes(x = month, y = Fpar_500m_mean)) +
geom_point(aes(x = month, y = Fpar_500m_mean,shape = 'MODIS')) +
geom_line(aes(x = month, y = FAPAR_field), data = FAPAR) +
geom_point(aes(x = month, y = FAPAR_field,shape = 'FAPAR'), data = FAPAR) +
facet_wrap(~site, nrow = 3, ncol = 1) +
scale_x_continuous(breaks = seq(1, 12, 1), labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
ylab("FAPAR mean (%)") +
scale_fill_gradient(low = "white", high = "black", name = "Percentage of \n data with cloud") + # Set gradient colors from blue to red
theme_bw() +scale_shape_manual(values =c(16, 17),labels = c('Measured' , 'MODIS'), name= 'Source')+
theme(panel.grid = element_blank()) +scale_colour_manual(values =c('#FFB000', 'cyan'),labels = c('Measured' , 'MODIS'), name= 'Source')
Processed_csv %>%
mutate(month = as.numeric(month)) %>%
ggplot() +
geom_rect(aes(xmin = month - 0.5, xmax = month + 0.5, ymin = 0, ymax = 100, fill = 1 - percentage_of_no_clound)) +
geom_line(aes(x = month, y = Fpar_500m_mean)) +
geom_point(aes(x = month, y = Fpar_500m_mean,shape = 'MODIS')) +
geom_line(aes(x = month, y = FAPAR_field), data = FAPAR) +
geom_point(aes(x = month, y = FAPAR_field,shape = 'FAPAR'), data = FAPAR) +
facet_wrap(~site, nrow = 3, ncol = 1) +
scale_x_continuous(breaks = seq(1, 12, 1), labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
ylab("FAPAR mean (%)") +
scale_fill_gradient(low = "white", high = "black", name = "Percentage of \n data with cloud") + # Set gradient colors from blue to red
theme_bw() +scale_shape_manual(values =c(16, 17),labels = c('Measured' , 'MODIS'), name= 'Source')+
theme(panel.grid = element_blank()) +scale_fill_manual(values =c('#FFB000', 'cyan'),labels = c('Measured' , 'MODIS'), name= 'Source')
Processed_csv %>%
mutate(month = as.numeric(month)) %>%
ggplot() +
geom_rect(aes(xmin = month - 0.5, xmax = month + 0.5, ymin = 0, ymax = 100, fill = 1 - percentage_of_no_clound)) +
geom_line(aes(x = month, y = Fpar_500m_mean)) +
geom_point(aes(x = month, y = Fpar_500m_mean,shape = 'MODIS')) +
geom_line(aes(x = month, y = FAPAR_field), data = FAPAR) +
geom_point(aes(x = month, y = FAPAR_field,shape = 'FAPAR'), data = FAPAR) +
facet_wrap(~site, nrow = 3, ncol = 1) +
scale_x_continuous(breaks = seq(1, 12, 1), labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
ylab("FAPAR mean (%)") +
scale_fill_gradient(low = "white", high = "black", name = "Percentage of \n data with cloud") + # Set gradient colors from blue to red
theme_bw() +scale_shape_manual(values =c(16, 17),labels = c('Measured' , 'MODIS'), name= 'Source')+
theme(panel.grid = element_blank()) +scale_color_manual(values =c('#FFB000', 'cyan'),labels = c('Measured' , 'MODIS'), name= 'Source')
Processed_csv %>%
mutate(month = as.numeric(month)) %>%
ggplot() +
geom_rect(aes(xmin = month - 0.5, xmax = month + 0.5, ymin = 0, ymax = 100, fill = 1 - percentage_of_no_clound)) +
geom_line(aes(x = month, y = Fpar_500m_mean)) +
geom_point(aes(x = month, y = Fpar_500m_mean,shape = 'MODIS')) +
geom_line(aes(x = month, y = FAPAR_field), data = FAPAR) +
geom_point(aes(x = month, y = FAPAR_field,shape = 'FAPAR'), data = FAPAR)+scale_color_manual(values =c('#FFB000', 'cyan'),labels = c('Measured' , 'MODIS'), name= 'Source') +
facet_wrap(~site, nrow = 3, ncol = 1) +
scale_x_continuous(breaks = seq(1, 12, 1), labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
ylab("FAPAR mean (%)") +
scale_fill_gradient(low = "white", high = "black", name = "Percentage of \n data with cloud") + # Set gradient colors from blue to red
theme_bw() +scale_shape_manual(values =c(16, 17),labels = c('Measured' , 'MODIS'), name= 'Source')+
theme(panel.grid = element_blank())
Processed_csv %>%
mutate(month = as.numeric(month)) %>%
ggplot() +
geom_rect(aes(xmin = month - 0.5, xmax = month + 0.5, ymin = 0, ymax = 100, fill = 1 - percentage_of_no_clound)) +
geom_line(aes(x = month, y = Fpar_500m_mean)) +
geom_point(aes(x = month, y = Fpar_500m_mean,col= 'MODIS')) +
geom_line(aes(x = month, y = FAPAR_field), data = FAPAR) +
geom_point(aes(x = month, y = FAPAR_field,col = 'FAPAR'), data = FAPAR) +
facet_wrap(~site, nrow = 3, ncol = 1) +
scale_x_continuous(breaks = seq(1, 12, 1), labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
ylab("FAPAR mean (%)") +
scale_fill_gradient(low = "white", high = "black", name = "Percentage of \n data with cloud") + # Set gradient colors from blue to red
theme_bw() +
scale_color_manual(values =c('#FFB000', 'cyan'),labels = c('Measured' , 'MODIS'), name= 'Source')+
#scale_shape_manual(values =c(16, 17),labels = c('Measured' , 'MODIS'), name= 'Source')+
theme(panel.grid = element_blank())
Processed_csv %>%
mutate(month = as.numeric(month)) %>%
ggplot() +
geom_rect(aes(xmin = month - 0.5, xmax = month + 0.5, ymin = 0, ymax = 100, fill = 1 - percentage_of_no_clound)) +
geom_line(aes(x = month, y = Fpar_500m_mean,col= 'MODIS')) +
geom_point(aes(x = month, y = Fpar_500m_mean,col= 'MODIS')) +
geom_line(aes(x = month, y = FAPAR_field,col = 'FAPAR'), data = FAPAR) +
geom_point(aes(x = month, y = FAPAR_field,col = 'FAPAR'), data = FAPAR) +
facet_wrap(~site, nrow = 3, ncol = 1) +
scale_x_continuous(breaks = seq(1, 12, 1), labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
ylab("FAPAR mean (%)") +
scale_fill_gradient(low = "white", high = "black", name = "Percentage of \n data with cloud") + # Set gradient colors from blue to red
theme_bw() +
scale_color_manual(values =c('#FFB000', 'cyan'),labels = c('Measured' , 'MODIS'), name= 'Source')+
#scale_shape_manual(values =c(16, 17),labels = c('Measured' , 'MODIS'), name= 'Source')+
theme(panel.grid = element_blank())
ggsave(filename = 'Fapar_time_series_Ghana_20230218.jpg',width=5.37 , height=4.84 )
J_to_mol = 4.6 # this will convert J m-2 s-1 (= W m-2) to umol (quanta) m-2 s-1
to_PPFD=1*1000000000/365/24/3600 * J_to_mol / 1000000 *3600*24*0.45 # this one will convert  (GJ m-2 year-1) to mol/m2/d, the 0.45 is photosynthetically active fraction (which is called PAR, see Wang et al Nature plants)
to_PPFD
